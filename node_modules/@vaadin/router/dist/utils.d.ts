import type Resolver from './resolver/resolver.js';
import type { Router } from './router.js';
import type { ActionResult, AnyObject, ChainItem, RedirectResult, Route, RouteContext, RouterLocation, WebComponentInterface } from './types.js';
export declare function ensureRoute<R extends AnyObject, C extends AnyObject>(route?: Route<R, C>): void;
export declare function ensureRoutes<R extends AnyObject, C extends AnyObject>(routes: Route<R, C> | ReadonlyArray<Route<R, C>>): void;
export declare function copyContextWithoutNext<R extends AnyObject, C extends AnyObject>({ next: _, ...context }: RouteContext<R, C>): Omit<RouteContext<R, C>, 'next'>;
export declare function getPathnameForRouter<T, R extends AnyObject, C extends AnyObject>(pathname: string, router: Resolver<T, R, C>): string;
export declare function getMatchedPath(pathItems: ReadonlyArray<Readonly<{
    path: string;
}>>): string;
export declare function getRoutePath<R extends AnyObject, C extends AnyObject>(chain: ReadonlyArray<ChainItem<R, C>>): string;
export type ResolverOnlyContext<R extends AnyObject, C extends AnyObject> = Readonly<{
    resolver: Router<R, C>;
}>;
export declare function createLocation<R extends AnyObject, C extends AnyObject>({ resolver, }: ResolverOnlyContext<R, C>): RouterLocation<R, C>;
export declare function createLocation<R extends AnyObject, C extends AnyObject>(context: RouteContext<R, C>, route?: Route<R, C>): RouterLocation<R, C>;
export declare function createRedirect<R extends AnyObject, C extends AnyObject>(context: RouteContext<R, C>, pathname: string): RedirectResult;
export declare function renderElement<R extends AnyObject, C extends AnyObject, E extends WebComponentInterface<R, C>>(context: RouteContext<R, C>, element: E): E;
export declare function maybeCall<R, A extends unknown[], O extends object>(callback: ((this: O, ...args: A) => R) | undefined, thisArg: O, ...args: A): R | undefined;
export declare function amend<A extends readonly unknown[], N extends keyof O, O extends AnyObject & {
    [key in N]: (this: O, ...args: A) => ActionResult | undefined;
}>(fn: keyof O, obj: O | undefined, ...args: A): (result: ActionResult) => ActionResult | undefined;
export declare function processNewChildren<R extends AnyObject, C extends AnyObject>(newChildren: Route<R, C> | ReadonlyArray<Route<R, C>> | undefined | void, route: Route<R, C>): void;
export declare function fireRouterEvent(type: string, detail: unknown): boolean;
export declare function logValue(value: unknown): string;
//# sourceMappingURL=utils.d.ts.map