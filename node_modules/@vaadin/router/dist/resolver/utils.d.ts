import type { AnyObject, ChildrenCallback, Route, RouteContext } from './types.js';
export declare function isObject(o: unknown): o is object;
export declare function isFunction(f: unknown): f is Function;
export declare function isString(s: unknown): s is string;
export declare function toArray<T>(value?: T | readonly T[]): readonly T[];
export declare function log(msg: string): string;
export declare class NotFoundError<T, R extends AnyObject, C extends AnyObject> extends Error {
    readonly code: number;
    readonly context: RouteContext<T, R, C>;
    constructor(context: RouteContext<T, R, C>);
}
export declare const notFoundResult: unique symbol;
export type NotFoundResult = typeof notFoundResult;
export declare function getNotFoundError<T, R extends AnyObject, C extends AnyObject>(context: RouteContext<T, R, C>): NotFoundError<T, R, C>;
export declare function resolvePath(path?: string | readonly string[]): string;
export declare function getRoutePath<T, R extends AnyObject, C extends AnyObject>(route: Route<T, R, C> | undefined): string;
export declare function unwrapChildren<T, R extends AnyObject, C extends AnyObject>(children: ChildrenCallback<T, R, C> | ReadonlyArray<Route<T, R, C>> | undefined): ReadonlyArray<Route<T, R, C>> | undefined;
//# sourceMappingURL=utils.d.ts.map