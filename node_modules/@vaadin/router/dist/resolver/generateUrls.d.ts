/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */
import { type ParseOptions, type TokensToFunctionOptions } from 'path-to-regexp';
import type { EmptyObject } from 'type-fest';
import Resolver from './resolver.js';
import type { AnyObject, Params, Route } from './types.js';
export type UrlParams = Readonly<Record<string, ReadonlyArray<number | string> | number | string>>;
export type StringifyQueryParams = (params: UrlParams) => string;
export type GenerateUrlOptions<T, R extends AnyObject, C extends AnyObject> = ParseOptions & Readonly<{
    /**
     * Add a query string to generated url based on unknown route params.
     */
    stringifyQueryParams?: StringifyQueryParams;
    /**
     * Generates a unique route name based on all parent routes with the specified separator.
     */
    uniqueRouteNameSep?: string;
    cacheKeyProvider?(route: Route<T, R, C>): string | undefined;
}> & TokensToFunctionOptions;
export type UrlGenerator = (routeName: string, params?: Params) => string;
declare function generateUrls<T = unknown, R extends AnyObject = EmptyObject, C extends AnyObject = EmptyObject>(resolver: Resolver<T, R, C>, options?: GenerateUrlOptions<T, R, C>): UrlGenerator;
export default generateUrls;
//# sourceMappingURL=generateUrls.d.ts.map