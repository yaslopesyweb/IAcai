/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */
import type { EmptyObject } from 'type-fest';
import type { ActionResult, AnyObject, MaybePromise, ResolveContext, Route, RouteContext } from './types.js';
export interface ResolutionErrorOptions extends ErrorOptions {
    code?: number;
}
export declare class ResolutionError<T, R extends AnyObject = EmptyObject, C extends AnyObject = EmptyObject> extends Error {
    readonly code?: number;
    readonly context: RouteContext<T, R, C>;
    constructor(context: RouteContext<T, R, C>, options?: ResolutionErrorOptions);
    warn(): void;
}
export type ErrorHandlerCallback<T> = (error: unknown) => T;
export type ResolveRouteCallback<T, R extends AnyObject, C extends AnyObject> = (context: RouteContext<T, R, C>) => MaybePromise<ActionResult<T | RouteContext<T, R, C>>>;
export type ResolverOptions<T, R extends AnyObject, C extends AnyObject> = Readonly<{
    baseUrl?: string;
    context?: RouteContext<T, R, C>;
    errorHandler?: ErrorHandlerCallback<T>;
    resolveRoute?: ResolveRouteCallback<T, R, C>;
}>;
export default class Resolver<T = unknown, R extends AnyObject = EmptyObject, C extends AnyObject = EmptyObject> {
    #private;
    /**
     * The base URL for all routes in the router instance. By default,
     * if the base element exists in the `<head>`, vaadin-router
     * takes the `<base href>` attribute value, resolved against the current
     * `document.URL`.
     */
    readonly baseUrl: string;
    readonly errorHandler?: ErrorHandlerCallback<T>;
    readonly resolveRoute: ResolveRouteCallback<T, R, C>;
    constructor(routes: ReadonlyArray<Route<T, R, C>> | Route<T, R, C>, options?: ResolverOptions<T, R, C>);
    get root(): Route<T, R, C>;
    get context(): RouteContext<T, R, C>;
    /**
     * If the baseUrl property is set, transforms the baseUrl and returns the full
     * actual `base` string for using in the `new URL(path, base);` and for
     * prepernding the paths with. The returned base ends with a trailing slash.
     *
     * Otherwise, returns empty string.
     */
    protected get __effectiveBaseUrl(): string;
    /**
     * Returns the current list of routes (as a shallow copy). Adding / removing
     * routes to / from the returned array does not affect the routing config,
     * but modifying the route objects does.
     *
     * @public
     */
    getRoutes(): ReadonlyArray<Route<T, R, C>>;
    /**
     * Removes all existing routes from the routing config.
     *
     * @public
     */
    removeRoutes(): void;
    /**
     * Asynchronously resolves the given pathname, i.e. finds all routes matching
     * the pathname and tries resolving them one after another in the order they
     * are listed in the routes config until the first non-null result.
     *
     * Returns a promise that is fulfilled with the return value of an object that consists of the first
     * route handler result that returns something other than `null` or `undefined` and context used to get this result.
     *
     * If no route handlers return a non-null result, or if no route matches the
     * given pathname the returned promise is rejected with a 'page not found'
     * `Error`.
     *
     * @param pathnameOrContext - the pathname to
     *    resolve or a context object with a `pathname` property and other
     *    properties to pass to the route resolver functions.
     */
    resolve(pathnameOrContext: ResolveContext<C> | string): Promise<ActionResult<RouteContext<T, R, C>>>;
    /**
     * Sets the routing config (replacing the existing one).
     *
     * @param routes - a single route or an array of those
     *    (the array is shallow copied)
     */
    setRoutes(routes: ReadonlyArray<Route<T, R, C>> | Route<T, R, C>): void;
    /**
     * If the baseUrl is set, matches the pathname with the routerâ€™s baseUrl,
     * and returns the local pathname with the baseUrl stripped out.
     *
     * If the pathname does not match the baseUrl, returns undefined.
     *
     * If the `baseUrl` is not set, returns the unmodified pathname argument.
     */
    protected __normalizePathname(pathname: string): string | undefined;
    /**
     * Appends one or several routes to the routing config and returns the
     * effective routing config after the operation.
     *
     * @param routes - a single route or an array of those
     *    (the array is shallow copied)
     */
    protected addRoutes(routes: ReadonlyArray<Route<T, R, C>> | Route<T, R, C>): ReadonlyArray<Route<T, R, C>>;
}
//# sourceMappingURL=resolver.d.ts.map