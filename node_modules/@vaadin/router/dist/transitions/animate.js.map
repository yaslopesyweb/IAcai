{
  "version": 3,
  "sources": ["../../src/transitions/animate.ts"],
  "sourcesContent": ["const willAnimate = (elem: Element) => {\r\n  const name = getComputedStyle(elem).getPropertyValue('animation-name');\r\n  return name && name !== 'none';\r\n};\r\n\r\nconst waitForAnimation = (elem: Element, cb: () => void) => {\r\n  const listener = () => {\r\n    elem.removeEventListener('animationend', listener);\r\n    cb();\r\n  };\r\n  elem.addEventListener('animationend', listener);\r\n};\r\n\r\nasync function animate(elem: Element, className: string): Promise<void> {\r\n  elem.classList.add(className);\r\n\r\n  return await new Promise((resolve: () => void) => {\r\n    if (willAnimate(elem)) {\r\n      const rect = elem.getBoundingClientRect();\r\n      const size = `height: ${rect.bottom - rect.top}px; width: ${rect.right - rect.left}px`;\r\n      elem.setAttribute('style', `position: absolute; ${size}`);\r\n      waitForAnimation(elem, () => {\r\n        elem.classList.remove(className);\r\n        elem.removeAttribute('style');\r\n        resolve();\r\n      });\r\n    } else {\r\n      elem.classList.remove(className);\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nexport default animate;\r\n"],
  "mappings": "AAAA,MAAM,cAAc,CAAC,SAAkB;AACrC,QAAM,OAAO,iBAAiB,IAAI,EAAE,iBAAiB,gBAAgB;AACrE,SAAO,QAAQ,SAAS;AAC1B;AAEA,MAAM,mBAAmB,CAAC,MAAe,OAAmB;AAC1D,QAAM,WAAW,MAAM;AACrB,SAAK,oBAAoB,gBAAgB,QAAQ;AACjD,OAAG;AAAA,EACL;AACA,OAAK,iBAAiB,gBAAgB,QAAQ;AAChD;AAEA,eAAe,QAAQ,MAAe,WAAkC;AACtE,OAAK,UAAU,IAAI,SAAS;AAE5B,SAAO,MAAM,IAAI,QAAQ,CAAC,YAAwB;AAChD,QAAI,YAAY,IAAI,GAAG;AACrB,YAAM,OAAO,KAAK,sBAAsB;AACxC,YAAM,OAAO,WAAW,KAAK,SAAS,KAAK,GAAG,cAAc,KAAK,QAAQ,KAAK,IAAI;AAClF,WAAK,aAAa,SAAS,uBAAuB,IAAI,EAAE;AACxD,uBAAiB,MAAM,MAAM;AAC3B,aAAK,UAAU,OAAO,SAAS;AAC/B,aAAK,gBAAgB,OAAO;AAC5B,gBAAQ;AAAA,MACV,CAAC;AAAA,IACH,OAAO;AACL,WAAK,UAAU,OAAO,SAAS;AAC/B,cAAQ;AAAA,IACV;AAAA,EACF,CAAC;AACH;AAEA,IAAO,kBAAQ;",
  "names": []
}
