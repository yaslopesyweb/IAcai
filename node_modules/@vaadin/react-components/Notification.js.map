{
  "version": 3,
  "sources": ["src/Notification.tsx", "src/generated/Notification.ts"],
  "sourcesContent": ["export * from \"@vaadin/notification/vaadin-notification.js\";\nimport {\n  type ComponentType,\n  type ForwardedRef,\n  forwardRef,\n  type ForwardRefExoticComponent,\n  type HTMLAttributes,\n  type ReactElement,\n  type ReactNode,\n  type RefAttributes,\n} from 'react';\nimport {\n  Notification as _Notification,\n  NotificationElement,\n  type NotificationProps as _NotificationProps,\n  type ShowOptions,\n} from './generated/Notification.js';\nimport { useSimpleOrChildrenRenderer } from './renderers/useSimpleOrChildrenRenderer.js';\nimport type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';\n\nexport * from './generated/Notification.js';\n\nexport type NotificationReactRendererProps = ReactSimpleRendererProps<NotificationElement>;\n\ntype OmittedNotificationHTMLAttributes = Omit<\n  HTMLAttributes<NotificationElement>,\n  'id' | 'className' | 'dangerouslySetInnerHTML' | 'slot'\n>;\n\nexport type NotificationProps = Partial<\n  Omit<_NotificationProps, 'children' | 'renderer' | keyof OmittedNotificationHTMLAttributes>\n> &\n  Readonly<{\n    children?: ReactNode | ComponentType<NotificationReactRendererProps>;\n    renderer?: ComponentType<NotificationReactRendererProps>;\n  }>;\n\nfunction Notification(\n  { children, ...props }: NotificationProps,\n  ref: ForwardedRef<NotificationElement>,\n): ReactElement | null {\n  const [portals, renderer] = useSimpleOrChildrenRenderer(props.renderer, children);\n\n  return (\n    <_Notification {...props} ref={ref} renderer={renderer}>\n      {portals}\n    </_Notification>\n  );\n}\n\nexport type NotificationFunction = ForwardRefExoticComponent<NotificationProps & RefAttributes<NotificationElement>> & {\n  show(contents: string, options?: ShowOptions): NotificationElement;\n};\n\nconst ForwardedNotification = forwardRef(Notification) as NotificationFunction;\nForwardedNotification.show = NotificationElement.show;\n\nexport { ForwardedNotification as Notification };\n", "import type { EventName } from \"@lit/react\";\nimport { Notification as NotificationElement, type NotificationEventMap as _NotificationEventMap, } from \"@vaadin/notification/vaadin-notification.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { NotificationElement, };\nexport type NotificationEventMap = Readonly<{\n    onClosed: EventName<_NotificationEventMap[\"closed\"]>;\n    onOpenedChanged: EventName<_NotificationEventMap[\"opened-changed\"]>;\n}>;\nconst events = { onClosed: \"closed\", onOpenedChanged: \"opened-changed\" } as NotificationEventMap;\nexport type NotificationProps = WebComponentProps<NotificationElement, NotificationEventMap>;\nexport const Notification = createComponent({\n    elementClass: NotificationElement, events, react: React, tagName: \"vaadin-notification\"\n});\n"],
  "mappings": "AAAA,WAAc,8CACd,OAGE,cAAAA,MAMK,QCTP,OAAS,gBAAgBC,MAAgF,8CACzG,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAMxD,IAAMC,EAAS,CAAE,SAAU,SAAU,gBAAiB,gBAAiB,EAE1DC,EAAeC,EAAgB,CACxC,aAAcC,EAAqB,OAAAH,EAAQ,MAAOI,EAAO,QAAS,qBACtE,CAAC,EDID,OAAS,+BAAAC,MAAmC,6CA2BxC,cAAAC,MAAA,oBAPJ,SAASC,EACP,CAAE,SAAAC,EAAU,GAAGC,CAAM,EACrBC,EACqB,CACrB,GAAM,CAACC,EAASC,CAAQ,EAAIP,EAA4BI,EAAM,SAAUD,CAAQ,EAEhF,OACEF,EAACC,EAAA,CAAe,GAAGE,EAAO,IAAKC,EAAK,SAAUE,EAC3C,SAAAD,EACH,CAEJ,CAMA,IAAME,EAAwBC,EAAWP,CAAY,EACrDM,EAAsB,KAAOE,EAAoB",
  "names": ["forwardRef", "NotificationElement", "React", "createComponent", "events", "Notification", "createComponent", "NotificationElement", "React", "useSimpleOrChildrenRenderer", "jsx", "Notification", "children", "props", "ref", "portals", "renderer", "ForwardedNotification", "forwardRef", "NotificationElement"]
}
