import { type ReactElement } from 'react';
import { type MenuBarElement, type MenuBarProps as _MenuBarProps, type MenuBarItem as _MenuBarItem, type SubMenuItem as _SubMenuItem } from './generated/MenuBar.js';
export * from './generated/MenuBar.js';
export type SubMenuItem = Omit<_SubMenuItem, 'component' | 'children'> & {
    component?: ReactElement | string;
    children?: Array<SubMenuItem>;
};
export type MenuBarItem = Omit<_MenuBarItem, 'component' | 'children'> & {
    component?: ReactElement | string;
    children?: Array<SubMenuItem>;
};
export type MenuBarItemSelectedEvent = CustomEvent<{
    value: MenuBarItem;
}>;
export type MenuBarProps = Partial<Omit<_MenuBarProps, 'items' | 'onItemSelected'>> & Readonly<{
    items?: Array<MenuBarItem>;
    onItemSelected?: (event: MenuBarItemSelectedEvent) => void;
}>;
declare const ForwardedMenuBar: import("react").ForwardRefExoticComponent<Partial<Omit<Partial<import("./utils/createComponent.js").ThemedWebComponentProps<MenuBarElement, Readonly<{
    onItemSelected: import("@lit/react").EventName<import("@vaadin/menu-bar").MenuBarEventMap["item-selected"]>;
}>>>, "items" | "onItemSelected">> & Readonly<{
    items?: Array<MenuBarItem>;
    onItemSelected?: (event: MenuBarItemSelectedEvent) => void;
}> & import("react").RefAttributes<MenuBarElement>>;
export { ForwardedMenuBar as MenuBar };
//# sourceMappingURL=MenuBar.d.ts.map