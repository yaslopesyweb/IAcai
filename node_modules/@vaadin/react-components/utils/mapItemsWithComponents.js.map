{
  "version": 3,
  "sources": ["../src/utils/mapItemsWithComponents.ts"],
  "sourcesContent": ["import { type ReactElement, type ReactPortal } from 'react';\nimport { createPortal } from 'react-dom';\n\ntype ItemWithReactElementComponent<T> = T & {\n  component?: ReactElement | string;\n  children?: Array<ItemWithReactElementComponent<T>>;\n};\n\ntype ItemWithHTMLElementComponent<T> = T & {\n  component?: HTMLElement | string;\n  children?: Array<ItemWithHTMLElementComponent<T>>;\n  __item?: ItemWithReactElementComponent<unknown>;\n};\n\n/**\n * This function transforms a hierarchical list of items, where each item may contain a React component,\n * into a list of items where each React component is replaced with an HTMLElement.\n *\n * The React components are not simply removed, but are instead rendered into portals.\n * The HTMLElements created for the portals have the given tag name.\n */\nexport function mapItemsWithComponents<T>(\n  items?: Array<ItemWithReactElementComponent<T>>,\n  wrapperTagName = 'div',\n): [Array<ReactPortal>, Array<ItemWithHTMLElementComponent<Omit<T, 'children' | 'component'>>> | undefined] {\n  const itemPortals: ReactPortal[] = [];\n\n  const webComponentItems = items?.map((item) => {\n    const { component, children, ...rest } = item;\n\n    // Recursively map children\n    const [childPortals, webComponentChildren] = mapItemsWithComponents(children, wrapperTagName);\n    itemPortals.push(...childPortals);\n\n    if (component && typeof component !== 'string') {\n      // Component is a React element, create a portal for it\n      const root = document.createElement(wrapperTagName);\n      itemPortals.push(createPortal(component, root));\n\n      return {\n        ...rest,\n        component: root,\n        children: webComponentChildren,\n        __item: item,\n      };\n    } else {\n      return {\n        // Component is a string, or undefined, add it as such\n        ...rest,\n        component,\n        children: webComponentChildren,\n        __item: item,\n      };\n    }\n  });\n\n  return [itemPortals, webComponentItems];\n}\n\n/**\n * Returns the original item related to the given mapped item.\n */\nexport function getOriginalItem<T>(mappedItem: ItemWithHTMLElementComponent<T>) {\n  return mappedItem.__item;\n}\n"],
  "mappings": "AAAA,MAAoD,QACpD,OAAS,gBAAAA,MAAoB,YAoBtB,SAASC,EACdC,EACAC,EAAiB,MACyF,CAC1G,MAAMC,EAA6B,CAAC,EAE9BC,EAAoBH,GAAO,IAAKI,GAAS,CAC7C,KAAM,CAAE,UAAAC,EAAW,SAAAC,EAAU,GAAGC,CAAK,EAAIH,EAGnC,CAACI,EAAcC,CAAoB,EAAIV,EAAuBO,EAAUL,CAAc,EAG5F,GAFAC,EAAY,KAAK,GAAGM,CAAY,EAE5BH,GAAa,OAAOA,GAAc,SAAU,CAE9C,MAAMK,EAAO,SAAS,cAAcT,CAAc,EAClD,OAAAC,EAAY,KAAKJ,EAAaO,EAAWK,CAAI,CAAC,EAEvC,CACL,GAAGH,EACH,UAAWG,EACX,SAAUD,EACV,OAAQL,CACV,CACF,KACE,OAAO,CAEL,GAAGG,EACH,UAAAF,EACA,SAAUI,EACV,OAAQL,CACV,CAEJ,CAAC,EAED,MAAO,CAACF,EAAaC,CAAiB,CACxC,CAKO,SAASQ,EAAmBC,EAA6C,CAC9E,OAAOA,EAAW,MACpB",
  "names": ["createPortal", "mapItemsWithComponents", "items", "wrapperTagName", "itemPortals", "webComponentItems", "item", "component", "children", "rest", "childPortals", "webComponentChildren", "root", "getOriginalItem", "mappedItem"]
}
