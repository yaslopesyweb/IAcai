{
  "version": 3,
  "sources": ["src/Grid.tsx", "src/generated/Grid.ts"],
  "sourcesContent": ["export * from \"@vaadin/grid/vaadin-grid.js\";\nimport { type ComponentType, type ForwardedRef, forwardRef, type ReactElement, type RefAttributes } from 'react';\nimport {\n  Grid as _Grid,\n  type GridDefaultItem,\n  type GridElement,\n  type GridProps as _GridProps,\n} from './generated/Grid.js';\nimport type { GridRowDetailsReactRendererProps } from './renderers/grid.js';\nimport { useModelRenderer } from './renderers/useModelRenderer.js';\n\nexport * from './generated/Grid.js';\n\nexport type GridProps<TItem> = Partial<Omit<_GridProps<TItem>, 'rowDetailsRenderer'>> &\n  Readonly<{\n    rowDetailsRenderer?: ComponentType<GridRowDetailsReactRendererProps<TItem>> | null;\n  }>;\n\nfunction Grid<TItem = GridDefaultItem>(\n  props: GridProps<TItem>,\n  ref: ForwardedRef<GridElement<TItem>>,\n): ReactElement | null {\n  const [portals, rowDetailsRenderer] = useModelRenderer(props.rowDetailsRenderer, { renderSync: true });\n\n  return (\n    <_Grid<TItem> {...props} ref={ref} rowDetailsRenderer={rowDetailsRenderer}>\n      {props.children}\n      {portals}\n    </_Grid>\n  );\n}\n\nconst ForwardedGrid = forwardRef(Grid) as <TItem = GridDefaultItem>(\n  props: GridProps<TItem> & RefAttributes<GridElement<TItem>>,\n) => ReactElement | null;\n\nexport { ForwardedGrid as Grid };\n\ncustomElements.whenDefined('vaadin-grid').then(() => {\n  const gridProto = customElements.get('vaadin-grid')?.prototype;\n  const originalRecalculateColumnWidths = gridProto?._recalculateColumnWidths;\n  gridProto._recalculateColumnWidths = function (...args: any[]) {\n    // Multiple synchronous calls to the renderers using flushSync cause\n    // some of the renderers to be called asynchronously (see useRenderer.ts).\n    // To make sure all the column cell content is rendered before recalculating\n    // the column widths, we need to make _recalculateColumnWidths asynchronous.\n    queueMicrotask(() => originalRecalculateColumnWidths.call(this, ...args));\n  };\n});\n", "import type { EventName } from \"@lit/react\";\nimport { Grid as GridElement, type GridEventMap as _GridEventMap, } from \"@vaadin/grid/vaadin-grid.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { GridElement, };\nexport type GridEventMap<T1> = Readonly<{\n    onActiveItemChanged: EventName<_GridEventMap<T1>[\"active-item-changed\"]>;\n    onCellActivate: EventName<_GridEventMap<T1>[\"cell-activate\"]>;\n    onColumnResize: EventName<_GridEventMap<T1>[\"column-resize\"]>;\n    onExpandedItemsChanged: EventName<_GridEventMap<T1>[\"expanded-items-changed\"]>;\n    onLoadingChanged: EventName<_GridEventMap<T1>[\"loading-changed\"]>;\n    onSelectedItemsChanged: EventName<_GridEventMap<T1>[\"selected-items-changed\"]>;\n    onCellFocus: EventName<_GridEventMap<T1>[\"cell-focus\"]>;\n    onColumnReorder: EventName<_GridEventMap<T1>[\"column-reorder\"]>;\n    onGridDragend: EventName<_GridEventMap<T1>[\"grid-dragend\"]>;\n    onGridDragstart: EventName<_GridEventMap<T1>[\"grid-dragstart\"]>;\n    onGridDrop: EventName<_GridEventMap<T1>[\"grid-drop\"]>;\n    onSizeChanged: EventName<CustomEvent<unknown>>;\n    onDataProviderChanged: EventName<CustomEvent<unknown>>;\n}>;\nconst events = { onActiveItemChanged: \"active-item-changed\", onCellActivate: \"cell-activate\", onColumnResize: \"column-resize\", onExpandedItemsChanged: \"expanded-items-changed\", onLoadingChanged: \"loading-changed\", onSelectedItemsChanged: \"selected-items-changed\", onCellFocus: \"cell-focus\", onColumnReorder: \"column-reorder\", onGridDragend: \"grid-dragend\", onGridDragstart: \"grid-dragstart\", onGridDrop: \"grid-drop\", onSizeChanged: \"size-changed\", onDataProviderChanged: \"data-provider-changed\" } as GridEventMap<unknown>;\nexport type GridProps<T1> = WebComponentProps<GridElement<T1>, GridEventMap<T1>>;\nexport const Grid = createComponent({\n    elementClass: GridElement, events, react: React, tagName: \"vaadin-grid\"\n}) as <T1>(props: GridProps<T1> & React.RefAttributes<GridElement<T1>>) => React.ReactElement | null;\n"],
  "mappings": "AAAA,WAAc,8BACd,OAAgD,cAAAA,MAAyD,QCAzG,OAAS,QAAQC,MAAwD,8BACzE,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAiBxD,IAAMC,EAAS,CAAE,oBAAqB,sBAAuB,eAAgB,gBAAiB,eAAgB,gBAAiB,uBAAwB,yBAA0B,iBAAkB,kBAAmB,uBAAwB,yBAA0B,YAAa,aAAc,gBAAiB,iBAAkB,cAAe,eAAgB,gBAAiB,iBAAkB,WAAY,YAAa,cAAe,eAAgB,sBAAuB,uBAAwB,EAEleC,EAAOC,EAAgB,CAChC,aAAcC,EAAa,OAAAH,EAAQ,MAAOI,EAAO,QAAS,aAC9D,CAAC,EDfD,OAAS,oBAAAC,MAAwB,kCAgB7B,eAAAC,MAAA,oBAPJ,SAASC,EACPC,EACAC,EACqB,CACrB,GAAM,CAACC,EAASC,CAAkB,EAAIN,EAAiBG,EAAM,mBAAoB,CAAE,WAAY,EAAK,CAAC,EAErG,OACEF,EAACC,EAAA,CAAc,GAAGC,EAAO,IAAKC,EAAK,mBAAoBE,EACpD,UAAAH,EAAM,SACNE,GACH,CAEJ,CAEA,IAAME,EAAgBC,EAAWN,CAAI,EAMrC,eAAe,YAAY,aAAa,EAAE,KAAK,IAAM,CACnD,IAAMO,EAAY,eAAe,IAAI,aAAa,GAAG,UAC/CC,EAAkCD,GAAW,yBACnDA,EAAU,yBAA2B,YAAaE,EAAa,CAK7D,eAAe,IAAMD,EAAgC,KAAK,KAAM,GAAGC,CAAI,CAAC,CAC1E,CACF,CAAC",
  "names": ["forwardRef", "GridElement", "React", "createComponent", "events", "Grid", "createComponent", "GridElement", "React", "useModelRenderer", "jsxs", "Grid", "props", "ref", "portals", "rowDetailsRenderer", "ForwardedGrid", "forwardRef", "gridProto", "originalRecalculateColumnWidths", "args"]
}
