{
  "version": 3,
  "sources": ["src/Popover.tsx", "src/generated/Popover.ts"],
  "sourcesContent": ["export * from \"@vaadin/popover/vaadin-popover.js\";\nimport {\n  type ComponentType,\n  type ForwardedRef,\n  type HTMLAttributes,\n  forwardRef,\n  type ReactElement,\n  type ReactNode,\n} from 'react';\nimport { Popover as _Popover, type PopoverElement, type PopoverProps as _PopoverProps } from './generated/Popover.js';\nimport { useSimpleOrChildrenRenderer } from './renderers/useSimpleOrChildrenRenderer.js';\nimport type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';\n\nexport * from './generated/Popover.js';\n\nexport type PopoverReactRendererProps = ReactSimpleRendererProps<PopoverElement>;\n\ntype OmittedPopoverHTMLAttributes = Omit<\n  HTMLAttributes<PopoverElement>,\n  'id' | 'className' | 'dangerouslySetInnerHTML' | 'slot'\n>;\n\nexport type PopoverProps = Partial<Omit<_PopoverProps, 'children' | 'renderer' | keyof OmittedPopoverHTMLAttributes>> &\n  Readonly<{\n    children?: ReactNode | ComponentType<PopoverReactRendererProps>;\n    renderer?: ComponentType<PopoverReactRendererProps> | null;\n  }>;\n\nfunction Popover({ children, ...props }: PopoverProps, ref: ForwardedRef<PopoverElement>): ReactElement | null {\n  const [portals, renderer] = useSimpleOrChildrenRenderer(props.renderer, children);\n\n  return (\n    <_Popover {...props} ref={ref} renderer={renderer}>\n      {portals}\n    </_Popover>\n  );\n}\n\nconst ForwardedPopover = forwardRef(Popover);\n\nexport { ForwardedPopover as Popover };\n", "import type { EventName } from \"@lit/react\";\nimport { Popover as PopoverElement, type PopoverEventMap as _PopoverEventMap, } from \"@vaadin/popover/vaadin-popover.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { PopoverElement, };\nexport type PopoverEventMap = Readonly<{\n    onClosed: EventName<_PopoverEventMap[\"closed\"]>;\n    onOpenedChanged: EventName<_PopoverEventMap[\"opened-changed\"]>;\n}>;\nconst events = { onClosed: \"closed\", onOpenedChanged: \"opened-changed\" } as PopoverEventMap;\nexport type PopoverProps = WebComponentProps<PopoverElement, PopoverEventMap>;\nexport const Popover = createComponent({\n    elementClass: PopoverElement, events, react: React, tagName: \"vaadin-popover\"\n});\n"],
  "mappings": "AAAA,WAAc,oCACd,OAIE,cAAAA,MAGK,QCPP,OAAS,WAAWC,MAAiE,oCACrF,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAMxD,IAAMC,EAAS,CAAE,SAAU,SAAU,gBAAiB,gBAAiB,EAE1DC,EAAUC,EAAgB,CACnC,aAAcC,EAAgB,OAAAH,EAAQ,MAAOI,EAAO,QAAS,gBACjE,CAAC,EDHD,OAAS,+BAAAC,MAAmC,6CAsBxC,cAAAC,MAAA,oBAJJ,SAASC,EAAQ,CAAE,SAAAC,EAAU,GAAGC,CAAM,EAAiBC,EAAwD,CAC7G,GAAM,CAACC,EAASC,CAAQ,EAAIP,EAA4BI,EAAM,SAAUD,CAAQ,EAEhF,OACEF,EAACC,EAAA,CAAU,GAAGE,EAAO,IAAKC,EAAK,SAAUE,EACtC,SAAAD,EACH,CAEJ,CAEA,IAAME,EAAmBC,EAAWP,CAAO",
  "names": ["forwardRef", "PopoverElement", "React", "createComponent", "events", "Popover", "createComponent", "PopoverElement", "React", "useSimpleOrChildrenRenderer", "jsx", "Popover", "children", "props", "ref", "portals", "renderer", "ForwardedPopover", "forwardRef"]
}
