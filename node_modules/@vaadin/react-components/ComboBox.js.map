{
  "version": 3,
  "sources": ["src/ComboBox.tsx", "src/generated/ComboBox.ts"],
  "sourcesContent": ["export * from \"@vaadin/combo-box/vaadin-combo-box.js\";\nimport type { ComboBoxDefaultItem } from '@vaadin/combo-box';\nimport { type ComponentType, forwardRef, type ReactElement, type RefAttributes, type ForwardedRef } from 'react';\nimport {\n  ComboBox as _ComboBox,\n  type ComboBoxElement,\n  type ComboBoxProps as _ComboBoxProps,\n} from './generated/ComboBox.js';\nimport type { ComboBoxReactRendererProps } from './renderers/combobox.js';\nimport { useModelRenderer } from './renderers/useModelRenderer.js';\n\nexport * from './generated/ComboBox.js';\n\nexport type ComboBoxProps<TItem> = Partial<Omit<_ComboBoxProps<TItem>, 'renderer'>> &\n  Readonly<{\n    renderer?: ComponentType<ComboBoxReactRendererProps<TItem>> | null;\n  }>;\n\nfunction ComboBox<TItem = ComboBoxDefaultItem>(\n  props: ComboBoxProps<TItem>,\n  ref: ForwardedRef<ComboBoxElement<TItem>>,\n): ReactElement | null {\n  const [portals, renderer] = useModelRenderer(props.renderer);\n\n  return (\n    <_ComboBox<TItem> {...props} ref={ref} renderer={renderer}>\n      {props.children}\n      {portals}\n    </_ComboBox>\n  );\n}\n\nconst ForwardedComboBox = forwardRef(ComboBox) as <TItem = ComboBoxDefaultItem>(\n  props: ComboBoxProps<TItem> & RefAttributes<ComboBoxElement<TItem>>,\n) => ReactElement | null;\n\nexport { ForwardedComboBox as ComboBox };\n", "import type { EventName } from \"@lit/react\";\nimport { ComboBox as ComboBoxElement, type ComboBoxEventMap as _ComboBoxEventMap, } from \"@vaadin/combo-box/vaadin-combo-box.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { ComboBoxElement, };\nexport type ComboBoxEventMap<T1> = Readonly<{\n    onValidated: EventName<_ComboBoxEventMap<T1>[\"validated\"]>;\n    onChange: EventName<_ComboBoxEventMap<T1>[\"change\"]>;\n    onInput: EventName<_ComboBoxEventMap<T1>[\"input\"]>;\n    onCustomValueSet: EventName<_ComboBoxEventMap<T1>[\"custom-value-set\"]>;\n    onSelectedItemChanged: EventName<_ComboBoxEventMap<T1>[\"selected-item-changed\"]>;\n    onValueChanged: EventName<_ComboBoxEventMap<T1>[\"value-changed\"]>;\n    onInvalidChanged: EventName<_ComboBoxEventMap<T1>[\"invalid-changed\"]>;\n    onOpenedChanged: EventName<_ComboBoxEventMap<T1>[\"opened-changed\"]>;\n    onFilterChanged: EventName<_ComboBoxEventMap<T1>[\"filter-changed\"]>;\n}>;\nconst events = { onValidated: \"validated\", onChange: \"change\", onInput: \"input\", onCustomValueSet: \"custom-value-set\", onSelectedItemChanged: \"selected-item-changed\", onValueChanged: \"value-changed\", onInvalidChanged: \"invalid-changed\", onOpenedChanged: \"opened-changed\", onFilterChanged: \"filter-changed\" } as ComboBoxEventMap<unknown>;\nexport type ComboBoxProps<T1> = WebComponentProps<ComboBoxElement<T1>, ComboBoxEventMap<T1>>;\nexport const ComboBox = createComponent({\n    elementClass: ComboBoxElement, events, react: React, tagName: \"vaadin-combo-box\"\n}) as <T1>(props: ComboBoxProps<T1> & React.RefAttributes<ComboBoxElement<T1>>) => React.ReactElement | null;\n"],
  "mappings": "AAAA,WAAc,wCAEd,OAA6B,cAAAA,MAA4E,QCDzG,OAAS,YAAYC,MAAoE,wCACzF,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAaxD,IAAMC,EAAS,CAAE,YAAa,YAAa,SAAU,SAAU,QAAS,QAAS,iBAAkB,mBAAoB,sBAAuB,wBAAyB,eAAgB,gBAAiB,iBAAkB,kBAAmB,gBAAiB,iBAAkB,gBAAiB,gBAAiB,EAErSC,EAAWC,EAAgB,CACpC,aAAcC,EAAiB,OAAAH,EAAQ,MAAOI,EAAO,QAAS,kBAClE,CAAC,EDXD,OAAS,oBAAAC,MAAwB,kCAgB7B,eAAAC,MAAA,oBAPJ,SAASC,EACPC,EACAC,EACqB,CACrB,GAAM,CAACC,EAASC,CAAQ,EAAIN,EAAiBG,EAAM,QAAQ,EAE3D,OACEF,EAACC,EAAA,CAAkB,GAAGC,EAAO,IAAKC,EAAK,SAAUE,EAC9C,UAAAH,EAAM,SACNE,GACH,CAEJ,CAEA,IAAME,EAAoBC,EAAWN,CAAQ",
  "names": ["forwardRef", "ComboBoxElement", "React", "createComponent", "events", "ComboBox", "createComponent", "ComboBoxElement", "React", "useModelRenderer", "jsxs", "ComboBox", "props", "ref", "portals", "renderer", "ForwardedComboBox", "forwardRef"]
}
