{
  "version": 3,
  "sources": ["../src/renderers/useRenderer.ts"],
  "sourcesContent": ["import {\n  type ComponentType,\n  createElement,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n  useCallback,\n  useReducer,\n} from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport type { Slice, WebComponentRenderer } from './renderer.js';\n\nexport type UseRendererResult<W extends WebComponentRenderer> = readonly [\n  portals?: ReadonlyArray<ReactElement | null>,\n  renderer?: W,\n];\n\nconst initialState = new Map();\n\nfunction rendererReducer<W extends WebComponentRenderer>(\n  state: Map<HTMLElement, Slice<Parameters<W>, 1>>,\n  [root, ...args]: Parameters<W>,\n): Map<HTMLElement, Slice<Parameters<W>, 1>> {\n  return new Map(state).set(root, args as Slice<Parameters<W>, 1>);\n}\n\nexport type RendererConfig = {\n  renderSync?: boolean;\n};\n\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  node: ReactNode,\n  convert?: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig,\n): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRenderer: ComponentType<P> | null | undefined,\n  convert: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig,\n): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRendererOrNode: ReactNode | ComponentType<P> | null | undefined,\n  convert?: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig,\n): UseRendererResult<W> {\n  const [map, update] = useReducer<typeof rendererReducer<W>>(rendererReducer, initialState);\n  const renderer = useCallback(\n    ((...args: Parameters<W>) => {\n      if (config?.renderSync) {\n        // The web components may request multiple synchronous renderer calls that\n        // would result in flushSync logging a warning (and actually executing the\n        // overlapping flushSync in microtask timing). Suppress the warning and allow\n        // the resulting asynchronicity.\n        const console = globalThis.console as any;\n        const error = console.error;\n        console.error = (message: string) => {\n          if (message.includes('flushSync')) {\n            return;\n          }\n          error(message);\n        };\n        flushSync(() => update(args));\n        console.error = error;\n      } else {\n        update(args);\n      }\n    }) as W,\n    [],\n  );\n\n  return reactRendererOrNode\n    ? [\n        Array.from(map.entries()).map(([root, args]) =>\n          createPortal(\n            convert\n              ? createElement<P>(reactRendererOrNode as ComponentType<P>, convert(args))\n              : (reactRendererOrNode as ReactNode),\n            root,\n          ),\n        ),\n        renderer,\n      ]\n    : [];\n}\n"],
  "mappings": "AAAA,OAEE,iBAAAA,EAIA,eAAAC,EACA,cAAAC,MACK,QACP,OAAS,gBAAAC,EAAc,aAAAC,MAAiB,YAQxC,MAAMC,EAAe,IAAI,IAEzB,SAASC,EACPC,EACA,CAACC,EAAM,GAAGC,CAAI,EAC6B,CAC3C,OAAO,IAAI,IAAIF,CAAK,EAAE,IAAIC,EAAMC,CAA+B,CACjE,CAgBO,SAASC,EACdC,EACAC,EACAC,EACsB,CACtB,KAAM,CAACC,EAAKC,CAAM,EAAIb,EAAsCI,EAAiBD,CAAY,EACnFW,EAAWf,EACd,IAAIQ,IAAwB,CAC3B,GAAII,GAAQ,WAAY,CAKtB,MAAMI,EAAU,WAAW,QACrBC,EAAQD,EAAQ,MACtBA,EAAQ,MAASE,GAAoB,CAC/BA,EAAQ,SAAS,WAAW,GAGhCD,EAAMC,CAAO,CACf,EACAf,EAAU,IAAMW,EAAON,CAAI,CAAC,EAC5BQ,EAAQ,MAAQC,CAClB,MACEH,EAAON,CAAI,CAEf,EACA,CAAC,CACH,EAEA,OAAOE,EACH,CACE,MAAM,KAAKG,EAAI,QAAQ,CAAC,EAAE,IAAI,CAAC,CAACN,EAAMC,CAAI,IACxCN,EACES,EACIZ,EAAiBW,EAAyCC,EAAQH,CAAI,CAAC,EACtEE,EACLH,CACF,CACF,EACAQ,CACF,EACA,CAAC,CACP",
  "names": ["createElement", "useCallback", "useReducer", "createPortal", "flushSync", "initialState", "rendererReducer", "state", "root", "args", "useRenderer", "reactRendererOrNode", "convert", "config", "map", "update", "renderer", "console", "error", "message"]
}
